module Kessel
  module Auth
    # Exception raised when OAuth functionality is requested but dependencies are missing
    class OAuthDependencyError < StandardError
      def initialize: (?String message) -> void
    end

    # Exception raised when OAuth authentication fails
    class OAuthAuthenticationError < StandardError
      def initialize: (?String message) -> void
    end

    # Structure containing OIDC discovery metadata
    class OIDCDiscoveryMetadata < Struct
      attr_accessor token_endpoint: String
      def initialize: (String token_endpoint) -> void
    end

    # Response structure for OAuth token refresh
    class RefreshTokenResponse < Struct
      attr_accessor access_token: String
      attr_accessor expires_at: Time
      def initialize: (String access_token, Integer expires_at) -> void
    end

    # Module method for performing OIDC discovery
    def fetch_oidc_discovery: (String provider_url) -> OIDCDiscoveryMetadata

    # Checks if the openid_connect gem is available
    private
    def check_dependencies!: () -> void

    # OpenID Connect Client Credentials flow implementation
    class OAuth2ClientCredentials
      def initialize: (client_id: String, client_secret: String, token_endpoint: String) -> void
      def get_token: (?force_refresh: bool) -> RefreshTokenResponse

      private

      def token_valid?: () -> bool
      def refresh: () -> RefreshTokenResponse
      def create_oidc_client: () -> untyped
    end
  end
end
